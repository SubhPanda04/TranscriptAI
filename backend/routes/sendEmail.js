const express = require('express');
const nodemailer = require('nodemailer');
const validator = require('validator');
const Joi = require('joi');
const { sendEmailSchema } = require('../utils/validation');
const { ValidationError } = require('../utils/errors');
const { emailLimiter } = require('../config/rateLimit');

const router = express.Router();

router.post('/send-email', emailLimiter, async (req, res) => {
    const { error, value } = sendEmailSchema.validate(req.body);
    if (error) {
        throw new ValidationError('Invalid input', error.details[0].message);
    }
    const { summary, recipients } = value;
    const sanitizedSummary = validator.escape(summary.trim());
    const recipientList = recipients.split(',').map(email => email.trim()).filter(email => email);
    const emailSchema = Joi.string().email();
    for (const email of recipientList) {
        const { error } = emailSchema.validate(email);
        if (error) {
            throw new ValidationError(`Invalid email address: ${email}`);
        }
    }

    try {
        let transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS
            }
        });
        let mailOptions = {
            from: `"TranscriptAI" <${process.env.EMAIL_USER}>`,
            to: recipientList.join(','),
            subject: 'AI Meeting Summary - TranscriptAI',
            text: sanitizedSummary,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #333; border-bottom: 2px solid #4F46E5; padding-bottom: 10px;">
                        AI Meeting Summary
                    </h2>
                    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <pre style="white-space: pre-wrap; font-family: Arial, sans-serif;">${sanitizedSummary}</pre>
                    </div>
                    <p style="color: #666; font-size: 12px; margin-top: 30px;">
                        This summary was generated by TranscriptAI
                    </p>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        res.json({
            success: true,
            message: `Email sent successfully to ${recipientList.length} recipient(s)`
        });

    } catch (err) {
        if (err instanceof ValidationError) {
            throw err;
        }

        let errorMessage = 'Failed to send email.';
        if (err.code === 'EAUTH') {
            errorMessage = 'Email authentication failed. Please check your Gmail credentials and use an App Password.';
        } else if (err.code === 'ENOTFOUND') {
            errorMessage = 'Network error. Please check your internet connection.';
        } else if (err.responseCode === 534) {
            errorMessage = 'Gmail authentication failed. Please enable 2-factor authentication and use an App Password.';
        }

        const { APIError } = require('../utils/errors');
        throw new APIError(errorMessage, 500, { originalError: err.message, code: err.code });
    }
});

module.exports = router;