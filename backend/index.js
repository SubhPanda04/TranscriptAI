require('dotenv').config();
const express = require('express');
const cors = require('cors');
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const axios = require('axios');

const app = express();

// CORS configuration for production
const corsOptions = {
    origin: process.env.NODE_ENV === 'production'
        ? process.env.FRONTEND_URL
        : 'http://localhost:5173',
    credentials: true,
    optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(express.json({ limit: '2mb' }));
app.use(bodyParser.urlencoded({ extended: true }));

// Health check endpoint
app.get('/', (req, res) => {
    res.json({ message: 'MangoDesk Backend API is running!', status: 'healthy' });
});

app.get('/health', (req, res) => {
    res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

// POST /summarize
app.post('/summarize', async (req, res) => {
    const { transcript, prompt } = req.body;
    if (!transcript || !prompt) {
        return res.status(400).json({ error: 'Transcript and prompt are required.' });
    }
    try {
        const response = await axios.post(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${process.env.AI_API_KEY}`,
            {
                contents: [{
                    parts: [{
                        text: `You are a helpful meeting summarizer. ${prompt}\n\n${transcript}`
                    }]
                }],
                generationConfig: {
                    temperature: 0.5,
                    maxOutputTokens: 512
                }
            },
            {
                headers: {
                    'Content-Type': 'application/json'
                }
            }
        );

        const summary = response.data.candidates[0].content.parts[0].text;
        res.json({ summary });
    } catch (err) {
        console.error('Gemini API Error:', err.response?.data || err.message);
        res.status(500).json({
            error: 'Failed to generate summary.',
            details: err.response?.data?.error?.message || err.message
        });
    }
});

// POST /send-email
app.post('/send-email', async (req, res) => {
    const { summary, recipients } = req.body;
    if (!summary || !recipients) {
        return res.status(400).json({ error: 'Summary and recipients are required.' });
    }

    try {
        let transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS
            }
        });

        const recipientList = recipients.split(',').map(email => email.trim()).filter(email => email);
        let mailOptions = {
            from: `"TranscriptAI" <${process.env.EMAIL_USER}>`,
            to: recipientList.join(','),
            subject: 'AI Meeting Summary - TranscriptAI',
            text: summary,
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #333; border-bottom: 2px solid #4F46E5; padding-bottom: 10px;">
                        AI Meeting Summary
                    </h2>
                    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                        <pre style="white-space: pre-wrap; font-family: Arial, sans-serif;">${summary}</pre>
                    </div>
                    <p style="color: #666; font-size: 12px; margin-top: 30px;">
                        This summary was generated by TranscriptAI
                    </p>
                </div>
            `
        };

        await transporter.sendMail(mailOptions);
        res.json({
            success: true,
            message: `Email sent successfully to ${recipientList.length} recipient(s)`
        });

    } catch (err) {
        console.error('Email sending error:', err);

        let errorMessage = 'Failed to send email.';
        if (err.code === 'EAUTH') {
            errorMessage = 'Email authentication failed. Please check your Gmail credentials and use an App Password.';
        } else if (err.code === 'ENOTFOUND') {
            errorMessage = 'Network error. Please check your internet connection.';
        } else if (err.responseCode === 534) {
            errorMessage = 'Gmail authentication failed. Please enable 2-factor authentication and use an App Password.';
        }

        res.status(500).json({
            error: errorMessage,
            details: err.message,
            code: err.code
        });
    }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
